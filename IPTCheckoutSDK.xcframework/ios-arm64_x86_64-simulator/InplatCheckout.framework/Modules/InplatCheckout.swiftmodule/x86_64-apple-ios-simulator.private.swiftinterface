// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.2 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)
// swift-module-flags: -target x86_64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name InplatCheckout
// swift-module-flags-ignorable: -enable-bare-slash-regex
import Combine
import Foundation
import InplatCheckoutCore
import SafariServices
import Swift
import SwiftUI
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
extension InplatCheckout.InplatCheckoutSdk {
  convenience public init(configuration: InplatCheckoutCore.InplatCheckoutCoreSdkConfiguration)
}
@_hasMissingDesignatedInitializers final public class InplatCheckoutSdk {
  public enum PresentationType : Swift.String {
    case sheet
    case fullscreen
    case slide
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum DismissButtonType : Swift.String {
    case close
    case back
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public typealias PaymentCompletionHandler = () -> ()
  final public func presentCheckoutView(on presentingViewController: UIKit.UIViewController, dismissButtonType: InplatCheckout.InplatCheckoutSdk.DismissButtonType, presentationType: InplatCheckout.InplatCheckoutSdk.PresentationType, animated: Swift.Bool = true, completionHandler: @escaping InplatCheckout.InplatCheckoutSdk.PaymentCompletionHandler)
  @objc deinit
}
public struct IPTFont {
  public let url: Foundation.URL
  public let name: Swift.String
}
public struct SDKFontStyles {
  public let regularPrimaryFont: InplatCheckout.IPTFont
  public let mediumPrimaryFont: InplatCheckout.IPTFont
  public let boldPrimaryFont: InplatCheckout.IPTFont
}
extension Swift.String : Swift.Error {
}
extension InplatCheckout.InplatCheckoutSdk {
  final public func createView(dismissButtonType: InplatCheckout.InplatCheckoutSdk.DismissButtonType, presentationType: InplatCheckout.InplatCheckoutSdk.PresentationType) -> some SwiftUI.View
  
}
extension InplatCheckout.InplatCheckoutSdk.PresentationType : Swift.Equatable {}
extension InplatCheckout.InplatCheckoutSdk.PresentationType : Swift.Hashable {}
extension InplatCheckout.InplatCheckoutSdk.PresentationType : Swift.RawRepresentable {}
extension InplatCheckout.InplatCheckoutSdk.DismissButtonType : Swift.Equatable {}
extension InplatCheckout.InplatCheckoutSdk.DismissButtonType : Swift.Hashable {}
extension InplatCheckout.InplatCheckoutSdk.DismissButtonType : Swift.RawRepresentable {}
