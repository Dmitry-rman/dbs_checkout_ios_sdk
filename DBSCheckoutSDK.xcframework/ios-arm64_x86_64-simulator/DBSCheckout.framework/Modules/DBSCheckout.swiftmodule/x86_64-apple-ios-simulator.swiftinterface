// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.8 (swiftlang-5.8.0.124.2 clang-1403.0.22.11.100)
// swift-module-flags: -target x86_64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name DBSCheckout
// swift-module-flags-ignorable: -enable-bare-slash-regex
import Combine
import DBSCheckoutCore
import Foundation
import SafariServices
import Swift
import SwiftUI
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
extension DBSCheckout.DBSCheckoutSdk {
  convenience public init(configuration: DBSCheckoutCore.DBSCheckoutCoreSdkConfiguration)
}
@_hasMissingDesignatedInitializers final public class DBSCheckoutSdk {
  public enum PresentationType : Swift.String {
    case sheet
    case fullscreen
    case slide
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum DismissButtonType : Swift.String {
    case close
    case back
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum PaymentCompletionResult {
    case success
    case closed(isFailed: Swift.Bool)
  }
  public typealias PaymentCompletionHandler = (_ result: DBSCheckout.DBSCheckoutSdk.PaymentCompletionResult) -> Swift.Void
  final public func presentCheckoutView(on presentingViewController: UIKit.UIViewController, dismissButtonType: DBSCheckout.DBSCheckoutSdk.DismissButtonType, presentationType: DBSCheckout.DBSCheckoutSdk.PresentationType, animated: Swift.Bool = true, completionHandler: @escaping DBSCheckout.DBSCheckoutSdk.PaymentCompletionHandler)
  final public func presentBindCardView(on presentingViewController: UIKit.UIViewController, dismissButtonType: DBSCheckout.DBSCheckoutSdk.DismissButtonType, presentationType: DBSCheckout.DBSCheckoutSdk.PresentationType, animated: Swift.Bool = true, completionHandler: @escaping DBSCheckout.DBSCheckoutSdk.PaymentCompletionHandler)
  @objc deinit
}
public struct IPTFont {
  public let url: Foundation.URL
  public let name: Swift.String
}
public struct SDKFontStyles {
  public let regularPrimaryFont: DBSCheckout.IPTFont
  public let mediumPrimaryFont: DBSCheckout.IPTFont
  public let boldPrimaryFont: DBSCheckout.IPTFont
}
extension Swift.String : Swift.Error {
}
extension DBSCheckout.DBSCheckoutSdk {
  final public func createCheckoutView(dismissButtonType: DBSCheckout.DBSCheckoutSdk.DismissButtonType, presentationType: DBSCheckout.DBSCheckoutSdk.PresentationType, completionHandler: @escaping DBSCheckout.DBSCheckoutSdk.PaymentCompletionHandler) -> some SwiftUI.View
  
  final public func createBindCardView(dismissButtonType: DBSCheckout.DBSCheckoutSdk.DismissButtonType, presentationType: DBSCheckout.DBSCheckoutSdk.PresentationType, completionHandler: @escaping DBSCheckout.DBSCheckoutSdk.PaymentCompletionHandler) -> some SwiftUI.View
  
}
extension DBSCheckout.DBSCheckoutSdk.PresentationType : Swift.Equatable {}
extension DBSCheckout.DBSCheckoutSdk.PresentationType : Swift.Hashable {}
extension DBSCheckout.DBSCheckoutSdk.PresentationType : Swift.RawRepresentable {}
extension DBSCheckout.DBSCheckoutSdk.DismissButtonType : Swift.Equatable {}
extension DBSCheckout.DBSCheckoutSdk.DismissButtonType : Swift.Hashable {}
extension DBSCheckout.DBSCheckoutSdk.DismissButtonType : Swift.RawRepresentable {}
